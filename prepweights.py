import numpy as np

W1_CSV = "w32.csv" 
W2_CSV = "w232.csv" 

w1 = np.loadtxt(W1_CSV, delimiter=',', dtype=np.float32).flatten()
W2 = np.loadtxt(W2_CSV, delimiter=',', dtype=np.float32)

N_H = w1.size
if W2.ndim != 2 or W2.shape[1] != N_H:
    raise ValueError(f"W2 should be shape (N_O, {N_H}), but is {W2.shape}")

N_O = W2.shape[0]

w2 = W2.flatten()

with open("weights.h", "w") as f:
    f.write("// Auto-generated by prepweights.py\n")
    f.write("#pragma once\n\n")
    f.write("// Hidden layer size\n")
    f.write(f"#define N_H {N_H}\n")
    f.write("// Output layer size\n")
    f.write(f"#define N_O {N_O}\n\n")

    # W1
    f.write(f"// W1: flat, one weight per hidden neuron (length = N_H)\n")
    f.write(f"const float W1_data[N_H] = {{\n")
    for i, val in enumerate(w1):
        f.write(f"  {val:.6f}f,")
        if (i+1) % 8 == 0: f.write("\n")
    f.write("\n};\n\n")

    # W2
    f.write(f"// W2: full output×hidden matrix ({N_O}×{N_H})\n")
    f.write(f"const float W2_data[N_O * N_H] = {{\n")
    for i, val in enumerate(w2):
        f.write(f"  {val:.6f}f,")
        if (i+1) % 8 == 0: f.write("\n")
    f.write("\n};\n")

print("weights.h written!")  
